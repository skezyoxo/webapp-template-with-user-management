// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid()) @db.Uuid
  email            String    @unique
  passwordHash     String?   // Nullable for OAuth-only users
  displayName      String?
  username         String?   @unique  // Optional, but useful for @mentions and URLs
  imageUrl         String?
  timeZone        String?
  active           Boolean   @default(true)
  emailVerified    DateTime?
  
  // OAuth fields
  provider          String?   // "github", "google", "microsoft"
  providerId        String?
  providerAccountId String?   @unique // For OAuth account linking
  
  // Role-based access control
  role    Role     @relation(fields: [roleId], references: [id])
  roleId  String   @db.Uuid

  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastLoginAt  DateTime?

  @@index([email])
  @@index([provider, providerId])
  @@map("users")
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  isDefault   Boolean  @default(false)
  
  // Relationships
  users       User[]
  permissions RolePermission[]

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  resource    String   // e.g., "projects", "logs"
  action      String   // e.g., "create", "read", "update", "delete"
  
  // Relationships
  roles       RolePermission[]

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([resource, action])
  @@map("permissions")
}

model RolePermission {
  id            String     @id @default(uuid()) @db.Uuid
  role          Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId        String     @db.Uuid
  permission    Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId  String     @db.Uuid

  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// For OAuth session management (optional, depending on your auth strategy)
model Session {
  id            String   @id @default(uuid()) @db.Uuid
  sessionToken  String   @unique
  userId        String   @db.Uuid
  expires       DateTime

  @@index([userId])
  @@map("sessions")
}
