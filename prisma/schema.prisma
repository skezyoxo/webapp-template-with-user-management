generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  passwordHash      String?
  displayName       String?
  username          String?   @unique
  imageUrl          String?
  timeZone          String?
  active            Boolean   @default(true)
  emailVerified     DateTime?
  provider          String?
  providerId        String?
  providerAccountId String?   @unique
  roleId            String    @db.Uuid
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  accounts          Account[]
  sessions          Session[]
  role              Role      @relation(fields: [roleId], references: [id])
  auditLogs         AuditLog[]

  @@index([email])
  @@index([provider, providerId])
  @@map("users")
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  isDefault   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@index([resource, action])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(uuid()) @db.Uuid
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model AuditLog {
  id        String   @id @default(uuid()) @db.Uuid
  timestamp DateTime @default(now())
  userId    String   @db.Uuid
  action    String
  resource  String
  details   Json
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id])

  @@index([timestamp])
  @@index([userId])
  @@index([action])
  @@map("audit_logs")
}
